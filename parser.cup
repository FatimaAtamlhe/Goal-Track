// CUP specification for simple language with if/elsif/else expressions
import java_cup.runtime.*;

parser code {: 
  public void report_error(String message, Object info) {
    System.err.println("[Syntax Error] " + message + (info != null ? (" at " + info) : ""));
  }
:};

scan with {: new Lexer(System.in) :};

terminal EOF;
terminal IF, THEN, ELSE, END, ELSIF;
terminal SEMI, LPAREN, RPAREN;
terminal String IDENT;
terminal String NUMBER;
terminal String HTML_ENTITY;

non terminal String program;
non terminal String expression;
non terminal String condition;
non terminal String if_expression;
non terminal String elsif_list;

start with program;

program ::= expression:e           {: RESULT = e; :}
         | expression:e SEMI       {: RESULT = e; :}
         ;

// For this simple grammar, treat condition as expression
condition ::= expression:e         {: RESULT = e; :} ;

expression ::= IDENT               {: RESULT = "IDENT("+$1+")"; :}
            | NUMBER               {: RESULT = "NUMBER("+$1+")"; :}
            | HTML_ENTITY          {: RESULT = "ENTITY("+$1+")"; :}
            | LPAREN expression RPAREN {: RESULT = $2; :}
            | if_expression        {: RESULT = $1; :}
            ;

if_expression ::= IF condition THEN expression ELSE expression END IF
                  {: RESULT = "IF(" + $2 + ", " + $4 + ", " + $6 + ")"; :}
                | IF condition THEN expression elsif_list ELSE expression END IF
                  {: RESULT = "IF-ELSIF(" + $2 + ", " + $4 + ", " + $5 + ", " + $7 + ")"; :}
                ;

elsif_list ::= ELSIF condition THEN expression
               {: RESULT = "ELSIF(" + $2 + ", " + $4 + ")"; :}
             | elsif_list ELSIF condition THEN expression
               {: RESULT = $1 + ";ELSIF(" + $3 + ", " + $5 + ")"; :}
             ;